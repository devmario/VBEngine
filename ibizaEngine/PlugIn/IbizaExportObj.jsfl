var errorCode = 0;function sliceFileType(_fileName) {	var _result = "";	var _add = false;	for(var _i = _fileName.length - 1; _i >= 0; _i--) {		if(_add)			_result = _fileName[_i] + _result;		if(_fileName[_i] == '.') {			_add = true;		}	}	return _result;}//파일경로에서 파일스트링을 제거하고 경로만 리(/제외)function sliceFileName(filePath){	var pathStr = "";	var searchSlice;	for(var i = filePath.length - 1; i >= 0; i--)	{		if(filePath[i] == '/')		{			searchSlice = i;			break;		}	}	for(var i = 0; i < searchSlice; i++)	{		pathStr += filePath[i];	}	return pathStr;}//라이브러리에서 폴더를 제외한 이름을 리턴function sliceLibraryPath(filePath){	var pathStr = "";	var searchSlice;	for(var i = filePath.length - 1; i >= 0; i--)	{		if(filePath[i] == '/')		{			searchSlice = i;			break;		}	}	for(var i = searchSlice + 1; i < filePath.length; i++)	{		pathStr += filePath[i];	}	return pathStr;}//아이템이 다이나믹인가 검사function isDynamic(itemName){	var isItem = true;	var dynamicName = "_dynamic/";	for(var i = 0; i < dynamicName.length; i++)	{		if(itemName[i] != dynamicName[i])		{			isItem = false;			break;		}	}	return isItem;}//아이템이 오브젝트인가 검사function isObject(itemName){	var isItem = true;	var objName = "center/";	for(var i = 0; i < objName.length; i++)	{		if(itemName[i] != objName[i])		{			isItem = false;			break;		}	}	return isItem;}var _obj = new Array();var _objCount = 0;var	_dynamic = new Array();var _dynamicCount = 0;var doc = fl.getDocumentDOM();var filePath;filePath = sliceFileType(doc.path);var _img = new Array();_img[0] = filePath + ".png";var _uv = new Array();_uv[0] = filePath + ".uv";	FlashCS5extension.StartMakeObjectFile(filePath + ".obj", _img, _uv); var lib = doc.library;for(var i = 0; i < lib.items.length; i++){	var dynamicItem = lib.items[i];	if(dynamicItem.itemType != "movie clip")		continue;	if(isDynamic(dynamicItem.name))	{		lib.editItem(dynamicItem.name);		var timeLine = doc.getTimeline();				_dynamic[_dynamicCount] = new Array();		_dynamic[_dynamicCount][0] = sliceLibraryPath(dynamicItem.name);		_dynamic[_dynamicCount][1] = new Array();				timeLine.selectAllFrames();		if(timeLine.frameCount > 1) {			timeLine.copyFrames();			timeLine.convertToKeyframes();		}				var _dynamicObjectLen = new Array();		for(var j = 0; j < timeLine.frameCount; j++) {			_dynamic[_dynamicCount][1][j] = new Array();			_dynamicObjectLen[j] = 0;		}				for(var j = 0; j < timeLine.layers.length; j++)		{			var _layer = timeLine.layers[j];							for(var m = 0; m < _layer.frames.length; m++)			{				var _frame = _layer.frames[m];				for(var n = _frame.elements.length - 1; n >= 0; n--)				{					var _element = _frame.elements[n];					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]] = new Array();					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][0] = sliceLibraryPath(_element.libraryItem.name);					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][1] = _element.name;					if(_element.name == "") {						errorCode = 1;						alert("에러." + _dynamic[_dynamicCount][0] + "에 " + m + "프레임에 있는 " + 							  _dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][0] + "의 인스턴스 네임이 누락되었습니다.");					}										_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2] = new Array();					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][0] = _element.matrix.a;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][1] = _element.matrix.c;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][2] = _element.matrix.tx;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][3] = _element.matrix.b;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][4] = _element.matrix.d;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][5] = _element.matrix.ty;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][6] = 0.0;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][7] = 0.0;					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][8] = 1.0;										_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3] = new Array();					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][0] = parseInt((_element.colorRedPercent / 100) * 255);					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][1] = parseInt((_element.colorGreenPercent / 100) * 255);					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][2] = parseInt((_element.colorBluePercent / 100) * 255);					_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][3] = parseInt((_element.colorAlphaPercent / 100) * 255);										_dynamicObjectLen[m]++;				}			}		}				if(timeLine.frameCount > 1) {			timeLine.selectAllFrames();			timeLine.pasteFrames();		}				_dynamicCount++;	} else if(isObject(dynamicItem.name)) {		lib.editItem(dynamicItem.name);		var _element = doc.getTimeline().layers[0].frames[0].elements[0];		_obj[_objCount] = new Array();		_obj[_objCount][0] = sliceLibraryPath(_element.libraryItem.name);		_obj[_objCount][1] = _element.x;		_obj[_objCount][2] = _element.y;		_objCount++;	}}FlashCS5extension.WriteObject(_obj);FlashCS5extension.WriteDynamic(_dynamic);FlashCS5extension.EndMakeObjectFile();if(errorCode == 1) {	alert("에러.");} else {	alert("완료.");}