fl.outputPanel.clear();fl.trace("run VBExportObj.");var includeURI = fl.scriptURI;includeURI.replace("VBExportObj.jsfl", "VBjsflLibs/VBInclude.jsfl");fl.runScript(includeURI.replace);if(doc) {	//center폴더	var _obj = new Array();	var _objCount = 0;	//_dynamic폴더	var	_dynamic = new Array();	var _dynamicCount = 0;		//png, uv파일 패스	var filePath = sliceFileType(doc.path);	var _img = new Array();	_img.push(filePath + ".png");	var _uv = new Array();	_uv.push(filePath + ".uv");		//라이브러리	var lib = doc.library;		for(var i = 0; i < lib.items.length; i++)	{		var dynamicItem = lib.items[i];		//무비클립이 아닐경우 패스		if(dynamicItem.itemType != "movie clip")			continue;		//_dynamic아이템일 경우(에니메이션 가지고 있는 무비클립)		if(isDynamic(dynamicItem.name))		{			lib.editItem(dynamicItem.name);			var timeLine = doc.getTimeline();						//라이브러리 네임			_dynamic[_dynamicCount] = new Array();			_dynamic[_dynamicCount][0] = sliceLibraryPath(dynamicItem.name);			_dynamic[_dynamicCount][1] = new Array();						fl.trace("get animation info : " + dynamicItem.name);						//키프레임으로 변환(나중에 돌려놓음)			timeLine.selectAllFrames();			if(timeLine.frameCount > 1) {				timeLine.copyFrames();				timeLine.convertToKeyframes();			}						//프레임별 뎁스(_dynamicObjectLen)			var _dynamicObjectLen = new Array();			for(var j = 0; j < timeLine.frameCount; j++) {				_dynamic[_dynamicCount][1][j] = new Array();				_dynamicObjectLen[j] = 0;			}						//루프(레이어>프레임>뎁스)			for(var j = 0; j < timeLine.layers.length; j++)			{				var _layer = timeLine.layers[j];								for(var m = 0; m < _layer.frames.length; m++)				{					var _frame = _layer.frames[m];										for(var n = _frame.elements.length - 1; n >= 0; n--)					{						var _element = _frame.elements[n];						//인스턴스가 아닐경우 패스						if(_element.elementType != "instance")							continue;						//무비클립이 아닐경우 패스						if(_element.libraryItem.itemType != "movie clip")							continue;												//라이브러리 네임과 인스턴스 네임						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]] = new Array();						//center의 라이브러리 네임과 _dynamic의 라이브러리 네임이 중복되는것이 있으면 않됨						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][0] = sliceLibraryPath(_element.libraryItem.name);												//하나의 movie clip에 중복되는 인스턴스 네임이 있으면 않됨						if(_element.name == "") {							_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][1] = sliceLibraryPath(_element.libraryItem.name);						} else {							_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][1] = _element.name;						}												//매트릭스						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2] = new Array();						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][0] = _element.matrix.a;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][1] = _element.matrix.c;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][2] = _element.matrix.tx;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][3] = _element.matrix.b;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][4] = _element.matrix.d;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][5] = _element.matrix.ty;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][6] = 0.0;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][7] = 0.0;						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][2][8] = 1.0;												//칼라값						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3] = new Array();						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][0] = parseInt((_element.colorRedPercent / 100) * 255);						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][1] = parseInt((_element.colorGreenPercent / 100) * 255);						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][2] = parseInt((_element.colorBluePercent / 100) * 255);						_dynamic[_dynamicCount][1][m][_dynamicObjectLen[m]][3][3] = parseInt((_element.colorAlphaPercent / 100) * 255);												_dynamicObjectLen[m]++;					}				}			}						if(timeLine.frameCount > 1) {				timeLine.selectAllFrames();				timeLine.pasteFrames();			}						_dynamicCount++;		} else if(isObject(dynamicItem.name)) {			lib.editItem(dynamicItem.name);						fl.trace("get center info : " + dynamicItem.name);						var _element = doc.getTimeline().layers[0].frames[0].elements[0];						//인스턴스가 아닐경우 패스			if(_element.elementType != "instance")				continue;			//비트맵이 아닐경우 패스			if(_element.libraryItem.itemType != "bitmap")				continue;						_obj[_objCount] = new Array();			//center object네임 저장			_obj[_objCount][0] = sliceLibraryPath(_element.libraryItem.name);			//센터 좌표			_obj[_objCount][1] = _element.x;			_obj[_objCount][2] = _element.y;			_objCount++;		}	}	//플러그인	var plugIn = VBFlashPlugIn;		//obj에 정보저장하며 에러출력	fl.trace("save png and uv");	var plugInError = plugIn.StartMakeObjectFile(filePath + ".obj", _img, _uv);	if(plugInError != true) {		fl.trace(plugInError);	} else {		fl.trace("save animation info");		plugInError = plugIn.WriteObject(_obj);		if(plugInError != true) {			fl.trace(plugInError);		} else {			plugInError = plugIn.WriteDynamic(_dynamic);			if(plugInError != true) {				fl.trace(plugInError);			} else {				plugInError = plugIn.EndMakeObjectFile();				if(plugInError != true) {					fl.trace(plugInError);				} else {					fl.trace("complete");				}			}		}	}} else {	fl.trace("error : please open fla file for obj file.");}